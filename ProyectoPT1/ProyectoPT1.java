/* Generated By:JavaCC: Do not edit this line. ProyectoPT1.java */
        public class ProyectoPT1 implements ProyectoPT1Constants {
                public static void main (String[] args) throws ParseException{
                ProyectoPT1 anLex = new ProyectoPT1(System.in);
                anLex.unaExpresion();
                }

  static final public void unaExpresion() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        jj_consume_token(SUMA);
        break;
      case RESTA:
        jj_consume_token(RESTA);
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
        break;
      case MULTIPLICACION:
        jj_consume_token(MULTIPLICACION);
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        break;
      case MAYOR_QUE:
        jj_consume_token(MAYOR_QUE);
        break;
      case MENOR_QUE:
        jj_consume_token(MENOR_QUE);
        break;
      case MAYOR_IGUAL_QUE:
        jj_consume_token(MAYOR_IGUAL_QUE);
        break;
      case MENOR_IGUAL_QUE:
        jj_consume_token(MENOR_IGUAL_QUE);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        break;
      case IGUAL_IGUAL:
        jj_consume_token(IGUAL_IGUAL);
        break;
      case DISTINTO:
        jj_consume_token(DISTINTO);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case EXCLAMACION:
        jj_consume_token(EXCLAMACION);
        break;
      case DOS_PUNTOS:
        jj_consume_token(DOS_PUNTOS);
        break;
      case ID:
        jj_consume_token(ID);
        break;
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case STATIC:
        jj_consume_token(STATIC);
        break;
      case VOID:
        jj_consume_token(VOID);
        break;
      case MAIN:
        jj_consume_token(MAIN);
        break;
      case CLASS:
        jj_consume_token(CLASS);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case IF:
        jj_consume_token(IF);
        break;
      case ELSE:
        jj_consume_token(ELSE);
        break;
      case FOR:
        jj_consume_token(FOR);
        break;
      case WHILE:
        jj_consume_token(WHILE);
        break;
      case SYSTEM:
        jj_consume_token(SYSTEM);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      case ARG:
        jj_consume_token(ARG);
        break;
      case INTEGER:
        jj_consume_token(INTEGER);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case TRUE:
        jj_consume_token(TRUE);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        break;
      case DEF:
        jj_consume_token(DEF);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        break;
      case NUMERO_INT:
        jj_consume_token(NUMERO_INT);
        break;
      case NUMERO_HEX:
        jj_consume_token(NUMERO_HEX);
        break;
      case NUMERO_FLOAT:
        jj_consume_token(NUMERO_FLOAT);
        break;
      case LLAVE_DER:
        jj_consume_token(LLAVE_DER);
        break;
      case LLAVE_IZQ:
        jj_consume_token(LLAVE_IZQ);
        break;
      case CORCHETE_DER:
        jj_consume_token(CORCHETE_DER);
        break;
      case CORCHETE_IZQ:
        jj_consume_token(CORCHETE_IZQ);
        break;
      case PARENTESIS_DER:
        jj_consume_token(PARENTESIS_DER);
        break;
      case PARENTESIS_IZQ:
        jj_consume_token(PARENTESIS_IZQ);
        break;
      case COMA:
        jj_consume_token(COMA);
        break;
      case PUNTO_COMA:
        jj_consume_token(PUNTO_COMA);
        break;
      case COMILLAS:
        jj_consume_token(COMILLAS);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LLAVE_IZQ:
      case LLAVE_DER:
      case PARENTESIS_IZQ:
      case PARENTESIS_DER:
      case CORCHETE_IZQ:
      case CORCHETE_DER:
      case COMA:
      case PUNTO_COMA:
      case IGUAL:
      case SUMA:
      case RESTA:
      case MULTIPLICACION:
      case DIVISION:
      case MODULO:
      case MENOR_QUE:
      case MAYOR_QUE:
      case MENOR_IGUAL_QUE:
      case MAYOR_IGUAL_QUE:
      case IGUAL_IGUAL:
      case DISTINTO:
      case AND:
      case OR:
      case EXCLAMACION:
      case DOS_PUNTOS:
      case COMILLAS:
      case PUBLIC:
      case CLASS:
      case STATIC:
      case VOID:
      case MAIN:
      case INT:
      case FLOAT:
      case IF:
      case ELSE:
      case FOR:
      case WHILE:
      case SYSTEM:
      case STRING:
      case ARG:
      case INTEGER:
      case BOOL:
      case BOOLEAN:
      case TRUE:
      case FALSE:
      case RETURN:
      case DEF:
      case BREAK:
      case CONTINUE:
      case ID:
      case NUMERO_INT:
      case NUMERO_HEX:
      case NUMERO_FLOAT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProyectoPT1TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xfffffffe,0xfffffffe,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1fffff,0x1fffff,};
   }

  /** Constructor with InputStream. */
  public ProyectoPT1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProyectoPT1(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProyectoPT1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ProyectoPT1(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProyectoPT1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ProyectoPT1(ProyectoPT1TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ProyectoPT1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[64];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 64; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
