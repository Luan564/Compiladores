/* Generated By:JavaCC: Do not edit this line. ProyectoPT2.java */
        public class ProyectoPT2 implements ProyectoPT2Constants {
                public static void main (String[] args) throws ParseException{
                ProyectoPT2 anLex = new ProyectoPT2(System.in);
                anLex.unaExpresion();
                }

  static final public void unaExpresion() throws ParseException {
    label_1:
    while (true) {
      Expr();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PARENTESIS_IZQ:
      case RESTA:
      case EXCLAMACION:
      case STRING:
      case TRUE:
      case FALSE:
      case ID:
      case NUMERO_FLOAT:
      case NUMERO_INT:
      case NUMERO_HEX:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  static final public void Var() throws ParseException {
    Type();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CORCHETE_IZQ:
      jj_consume_token(CORCHETE_IZQ);
      jj_consume_token(NUMERO_INT);
      jj_consume_token(CORCHETE_DER);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMA:
      jj_consume_token(COMA);
      jj_consume_token(ID);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(PUNTO_COMA);
  }

  static final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Func() throws ParseException {
    jj_consume_token(DEF);
    Type();
    jj_consume_token(ID);
    jj_consume_token(PARENTESIS_IZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
    case INT:
    case FLOAT:
    case STRING:
    case BOOL:
      Params();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(PARENTESIS_DER);
    Block();
  }

  static final public void Params() throws ParseException {
    Type();
    jj_consume_token(ID);
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(COMA);
      Type();
      jj_consume_token(ID);
    }
  }

  static final public void Block() throws ParseException {
    jj_consume_token(LLAVE_IZQ);
    label_3:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_3;
      }
      Var();
    }
    label_4:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_4;
      }
      Stmt();
    }
    jj_consume_token(LLAVE_DER);
  }

  static final public void Stmt() throws ParseException {
    if (jj_2_4(2)) {
      Loc();
      jj_consume_token(IGUAL);
      Expr();
      jj_consume_token(PUNTO_COMA);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        FuncCall();
        jj_consume_token(PUNTO_COMA);
        break;
      case IF:
        jj_consume_token(IF);
        jj_consume_token(PARENTESIS_IZQ);
        Expr();
        jj_consume_token(PARENTESIS_DER);
        Block();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ELSE:
          jj_consume_token(ELSE);
          Block();
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        break;
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(PARENTESIS_IZQ);
        Expr();
        jj_consume_token(PARENTESIS_DER);
        Block();
        break;
      case RETURN:
        jj_consume_token(RETURN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARENTESIS_IZQ:
        case RESTA:
        case EXCLAMACION:
        case STRING:
        case TRUE:
        case FALSE:
        case ID:
        case NUMERO_FLOAT:
        case NUMERO_INT:
        case NUMERO_HEX:
          Expr();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        jj_consume_token(PUNTO_COMA);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(PUNTO_COMA);
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        jj_consume_token(PUNTO_COMA);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RESTA:
    case EXCLAMACION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RESTA:
        jj_consume_token(RESTA);
        break;
      case EXCLAMACION:
        jj_consume_token(EXCLAMACION);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      BaseExpr();
      ExprP();
      break;
    case PARENTESIS_IZQ:
    case STRING:
    case TRUE:
    case FALSE:
    case ID:
    case NUMERO_FLOAT:
    case NUMERO_INT:
    case NUMERO_HEX:
      BaseExpr();
      ExprP();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExprP() throws ParseException {
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
      case MULTIPLICACION:
      case DIVISION:
      case MODULO:
      case MENOR_QUE:
      case MAYOR_QUE:
      case MENOR_IGUAL_QUE:
      case MAYOR_IGUAL_QUE:
      case IGUAL_IGUAL:
      case DISTINTO:
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
        jj_consume_token(SUMA);
        break;
      case RESTA:
        jj_consume_token(RESTA);
        break;
      case MULTIPLICACION:
        jj_consume_token(MULTIPLICACION);
        break;
      case DIVISION:
        jj_consume_token(DIVISION);
        break;
      case MODULO:
        jj_consume_token(MODULO);
        break;
      case MENOR_QUE:
        jj_consume_token(MENOR_QUE);
        break;
      case MENOR_IGUAL_QUE:
        jj_consume_token(MENOR_IGUAL_QUE);
        break;
      case MAYOR_QUE:
        jj_consume_token(MAYOR_QUE);
        break;
      case MAYOR_IGUAL_QUE:
        jj_consume_token(MAYOR_IGUAL_QUE);
        break;
      case IGUAL_IGUAL:
        jj_consume_token(IGUAL_IGUAL);
        break;
      case DISTINTO:
        jj_consume_token(DISTINTO);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Expr();
      ExprP();
    }
  }

  static final public void BaseExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARENTESIS_IZQ:
      jj_consume_token(PARENTESIS_IZQ);
      Expr();
      jj_consume_token(PARENTESIS_DER);
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_5(2)) {
        FuncCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          Loc();
          break;
        case STRING:
        case TRUE:
        case FALSE:
        case NUMERO_FLOAT:
        case NUMERO_INT:
        case NUMERO_HEX:
          Lit();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void Loc() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CORCHETE_IZQ:
      jj_consume_token(CORCHETE_IZQ);
      Expr();
      jj_consume_token(CORCHETE_DER);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  static final public void FuncCall() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(PARENTESIS_IZQ);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARENTESIS_IZQ:
    case RESTA:
    case EXCLAMACION:
    case STRING:
    case TRUE:
    case FALSE:
    case ID:
    case NUMERO_FLOAT:
    case NUMERO_INT:
    case NUMERO_HEX:
      Args();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(PARENTESIS_DER);
  }

  static final public void Args() throws ParseException {
    Expr();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(COMA);
      Expr();
    }
  }

  static final public void Lit() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO_INT:
      jj_consume_token(NUMERO_INT);
      break;
    case NUMERO_FLOAT:
      jj_consume_token(NUMERO_FLOAT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case NUMERO_HEX:
      jj_consume_token(NUMERO_HEX);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_7()) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) return true;
    }
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) return true;
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(PUNTO_COMA)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(PARENTESIS_IZQ)) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(CORCHETE_IZQ)) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(PUNTO_COMA)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_scan_token(PUNTO_COMA)) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(PARENTESIS_IZQ)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(PARENTESIS_IZQ)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(IGUAL)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(PARENTESIS_IZQ)) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ProyectoPT2TokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x800808,0x2,0x80,0xe0000000,0xe0000000,0x0,0x800808,0x0,0x800800,0x800808,0x7ffc00,0x7ffc00,0x8,0x0,0x2,0x800808,0x80,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1e0c20,0x0,0x0,0x120,0x120,0x2,0x1e0c20,0x2d009,0x0,0x1e0c20,0x0,0x0,0x0,0x1e0c20,0x0,0x1e0c20,0x0,0x1c0c20,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[5];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ProyectoPT2(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ProyectoPT2(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ProyectoPT2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ProyectoPT2(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ProyectoPT2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ProyectoPT2(ProyectoPT2TokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ProyectoPT2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[65];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 65; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
