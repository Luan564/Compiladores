/* Generated By:JavaCC: Do not edit this line. lexicoSintacticoTokenManager.java */

/** Token Manager. */
public class lexicoSintacticoTokenManager implements lexicoSintacticoConstants
{
    static int longCadena;
    static final int maximoEntero = 65535;
    static StringBuilder cadenaActual = new StringBuilder();

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x80040L) != 0L)
            return 10;
         if ((active0 & 0xc00000000000000L) != 0L || (active1 & 0x30L) != 0L)
            return 3;
         if ((active0 & 0x1fffffffffe0L) != 0L)
         {
            jjmatchedKind = 48;
            return 28;
         }
         if ((active0 & 0x4000000000000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x1fffffffffc0L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 1;
            return 28;
         }
         if ((active0 & 0x20L) != 0L)
            return 28;
         return -1;
      case 2:
         if ((active0 & 0x204c0200a00L) != 0L)
            return 28;
         if ((active0 & 0x1dfb3fdff5c0L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 2;
            }
            return 28;
         }
         return -1;
      case 3:
         if ((active0 & 0xbeabf1ec500L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 48;
               jjmatchedPos = 3;
            }
            return 28;
         }
         if ((active0 & 0x141100c130c0L) != 0L)
            return 28;
         return -1;
      case 4:
         if ((active0 & 0x28abf14d040L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 4;
            return 28;
         }
         if ((active0 & 0x960000a0500L) != 0L)
            return 28;
         return -1;
      case 5:
         if ((active0 & 0x28283109000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
            return 28;
         }
         if ((active0 & 0x83c044040L) != 0L)
            return 28;
         return -1;
      case 6:
         if ((active0 & 0x28200008000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 6;
            return 28;
         }
         if ((active0 & 0x83101000L) != 0L)
            return 28;
         return -1;
      case 7:
         if ((active0 & 0x200008000L) != 0L)
            return 28;
         if ((active0 & 0x28000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 7;
            return 28;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 8;
            return 28;
         }
         if ((active0 & 0x20000000000L) != 0L)
            return 28;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 34:
         return jjStopAtPos(0, 45);
      case 37:
         return jjStopAtPos(0, 67);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 40:
         return jjStopAtPos(0, 76);
      case 41:
         return jjStopAtPos(0, 77);
      case 42:
         return jjStopAtPos(0, 75);
      case 43:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 44:
         return jjStopAtPos(0, 55);
      case 45:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 46:
         return jjStartNfaWithStates_0(0, 62, 7);
      case 47:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000L);
      case 58:
         return jjStopAtPos(0, 56);
      case 59:
         return jjStopAtPos(0, 57);
      case 60:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x202000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x2000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 78);
      case 93:
         return jjStopAtPos(0, 79);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x100000001400L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4101088000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x81000c0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000020200L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x28080000820L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x600000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x50024040000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x810000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 123:
         return jjStopAtPos(0, 80);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 125:
         return jjStopAtPos(0, 81);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 42:
         if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(1, 83);
         break;
      case 43:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 45:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 61:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         else if ((active1 & 0x2L) != 0L)
            return jjStopAtPos(1, 65);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x201020000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x40400204000L, active1, 0L);
      case 102:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100800100L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000800c0L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x20080000800L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400000b200L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x42010400L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x24040000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x12010400000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x8100000L, active1, 0L);
      case 124:
         if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x104080000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 28);
         break;
      case 103:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x802100L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x40001420000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000008000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x180002001000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1a000000000L);
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x220040000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000c0L);
      case 116:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20088104000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 119:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000400L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 28);
         break;
      case 101:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x30888100040L);
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 28);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 28);
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xa011001100L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 28);
         break;
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x42000a0000L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x4008000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x44000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800040000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 8, 28);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 28);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x8200001000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x14008040L);
      case 107:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 10, 28);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x20100000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x2000a004000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 28);
         break;
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 28);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2001000L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 28);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 28);
         break;
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 102:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(5, 6, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 103:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 28);
         break;
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 14, 28);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 28);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 28);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 109:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 28);
         break;
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 28);
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 114:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 28);
         break;
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 28);
         break;
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 28);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 15, 28);
         break;
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 116:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 41, 28);
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 39, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x2000000000000L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(9);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(1);
                  }
                  break;
               case 0:
                  if ((0x3ff001800000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(9);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(3);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddStates(0, 6);
                  }
                  if (curChar == 48)
                     jjAddStates(7, 10);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 46)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff001800000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if (curChar == 47)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 10)
                     kind = 82;
                  break;
               case 13:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(0, 6);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 46 && kind > 52)
                     kind = 52;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar != 46)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 17);
                  break;
               case 21:
                  if (curChar == 48)
                     jjAddStates(7, 10);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjstateSet[jjnewStateCnt++] = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if ((0x7fffffe87ffffffL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(9);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(1);
                  }
                  break;
               case 0:
                  if ((0x7fffffe07ffffffL & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                     jjCheckNAdd(9);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(1);
                  break;
               case 8:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x7fffffe87ffffffL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  jjAddStates(11, 12);
                  break;
               case 22:
                  if (curChar == 120)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if (curChar == 88)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if (curChar == 120)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if (curChar == 88)
                     jjCheckNAdd(26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
               case 9:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(9);
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  if ((jjbitVec1[i2] & l2) != 0L)
                     jjAddStates(11, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
static private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x100000L);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_2(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_2(0, 0L, active1);
}
static private int jjMoveNfa_2(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     kind = 85;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 85;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec1[i2] & l2) != 0L && kind > 85)
                     kind = 85;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private static final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private static final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
static private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 46);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
static private int jjMoveNfa_1(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     kind = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec1[i2] & l2) != 0L && kind > 47)
                     kind = 47;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   15, 3, 4, 16, 17, 18, 19, 22, 24, 25, 27, 11, 12, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\151\146", "\145\154\163\145\151\146", 
"\145\154\163\145", "\167\150\151\154\145", "\146\157\162", "\142\162\145\141\153", 
"\151\156\164", "\142\157\157\154\145\141\156", "\166\157\151\144", 
"\162\145\164\165\162\156", "\143\157\156\164\151\156\165\145", "\164\162\165\145", 
"\146\141\154\163\145", "\163\164\162\165\143\164", "\143\154\141\163\163", 
"\145\170\164\145\156\144\163", "\156\145\167", "\156\165\154\154", "\164\150\151\163", 
"\143\141\154\154\157\165\164", "\120\162\157\147\162\141\155", "\163\164\141\164\151\143", 
"\145\170\164\145\162\156", "\160\165\142\154\151\143", "\163\164\162\151\156\147", "\141\162\147", 
"\151\156\164\145\147\145\162", "\143\150\141\162", "\120\141\162\163\145\111\156\164", "\144\145\146", 
"\117\142\152\145\143\164", "\114\151\163\164", "\124\165\160\154\145", "\143\157\156\163\164", 
"\151\155\160\154\145\155\145\156\164\163", "\163\165\160\145\162", "\151\156\164\145\162\146\141\143\145", 
"\163\145\154\146", "\146\154\157\141\164", "\142\157\157\154", null, null, null, null, null, null, 
null, null, null, null, "\54", "\72", "\73", "\53\53", "\53", "\75\75", "\75", 
"\56", "\74\75", "\74", "\76\75", "\76", "\45", "\55\55", "\55", "\57", "\41\75", 
"\41", "\46\46", "\174\174", "\52", "\50", "\51", "\133", "\135", "\173", "\175", 
null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
   "DentroCadena", 
   "DentroComentario", 
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 2, 0, -1, -1, 
};
static final long[] jjtoToken = {
   0xff8f5fffffffffe1L, 0x3ffffL, 
};
static final long[] jjtoSkip = {
   0x7000000000001eL, 0x5c0000L, 
};
static final long[] jjtoSpecial = {
   0x70000000000000L, 0x400000L, 
};
static final long[] jjtoMore = {
   0xa00000000000L, 0x200000L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[28];
static private final int[] jjstateSet = new int[56];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public lexicoSintacticoTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public lexicoSintacticoTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         if (jjmatchedPos == 0 && jjmatchedKind > 86)
         {
            jjmatchedKind = 86;
         }
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else 
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 52 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                                       System.out.println("N\u00famero flotante mal construido: " + image + " en la l\u00ednea: " + matchedToken.beginLine);
         break;
      case 53 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                     System.out.println("N\u00famero hexadecimal mal construido: " + image + " en la l\u00ednea: " + matchedToken.beginLine);
         break;
      case 54 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println("identificar mal construido: " + image + " en la l\u00ednea: " + matchedToken.beginLine);
         break;
      case 86 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
           System.out.println("S\u00edmbolo no v\u00e1lido en la l\u00ednea " + matchedToken.beginLine);
         break;
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 45 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
    longCadena = 0;
    cadenaActual.setLength(0);
         break;
      case 47 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
        longCadena++;
        cadenaActual.append(image);  // Agrega el carácter actual a la cadena
        if (longCadena > maximoEntero) {
            System.out.println("La cadena excede el l\u00edmite de " + maximoEntero + " caracteres.");
        }
         break;
      default : 
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 5 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
            System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 6 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                    System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 7 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
               System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 8 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                 System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 9 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
             System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                 System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
             System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                     System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
               System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                   System.out.println(matchedToken.beginLine + ": Palabra reservada: " + image);
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                       System.out.println(matchedToken.beginLine + ": Palabra reservada: " + image);
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
               System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                 System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                   System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                 System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 20 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                     System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 21 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
             System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
               System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 23 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
               System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 24 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                     System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 25 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                     System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 26 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                   System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 27 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                   System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 28 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                   System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 29 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                   System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
             System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 31 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                     System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 32 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
               System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 33 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                       System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 34 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
             System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 35 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                   System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 36 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
               System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                 System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 38 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                 System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 39 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                           System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 40 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                 System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 41 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                         System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 42 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
               System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 43 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                 System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 44 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
               System.out.println(matchedToken.beginLine + ": Palabra reservada:  "+ image);
         break;
      case 46 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.print(matchedToken.beginLine + ": cadena:  "+ image);
        System.out.println(" N\u00famero de caracteres = " + longCadena);
         break;
      case 48 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(matchedToken.beginLine + ": Token de tipo ID, lexema: " + image);
         break;
      case 49 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
            // Convertimos el número a long para manejar grandes valores
            long valorLong = Long.parseLong(image.toString());

            // Verificamos si está dentro del rango de un int (-2147483647 a 2147483647)
            if (valorLong >= -2147483647L && valorLong <= 2147483647L) {
                int valor = (int) valorLong;  // Solo lo convertimos a int si está en el rango
                System.out.println(matchedToken.beginLine + ": N\u00famero entero: " + valor);
            } else {
                System.out.println("N\u00famero entero fuera del rango: " + image + " en la l\u00ednea: " + matchedToken.beginLine);
            }
         break;
      case 50 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
        System.out.println(matchedToken.beginLine + ": N\u00famero hexadecimal: " + image);
         break;
      case 51 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                  System.out.println(matchedToken.beginLine + ": N\u00famero flotante: " +image);
         break;
      case 55 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[55]);
        lengthOfMatch = jjstrLiteralImages[55].length();
                 System.out.println(matchedToken.beginLine + ": Coma: "+image);
         break;
      case 56 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[56]);
        lengthOfMatch = jjstrLiteralImages[56].length();
                      System.out.println(matchedToken.beginLine + ": Dos puntos: "+image);
         break;
      case 57 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[57]);
        lengthOfMatch = jjstrLiteralImages[57].length();
                          System.out.println(matchedToken.beginLine + ": Punto y coma: "+image);
         break;
      case 58 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[58]);
        lengthOfMatch = jjstrLiteralImages[58].length();
                        System.out.println(matchedToken.beginLine + ": Incremento: "+image);
         break;
      case 59 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                 System.out.println(matchedToken.beginLine + ": Suma: "+image);
         break;
      case 60 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                      System.out.println(matchedToken.beginLine + ": Igualdad: "+image);
         break;
      case 61 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                  System.out.println(matchedToken.beginLine + ": Igual: "+image);
         break;
      case 62 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                  System.out.println(matchedToken.beginLine + ": Punto: "+image);
         break;
      case 63 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                        System.out.println(matchedToken.beginLine + ": Menor o igual que: "+image);
         break;
      case 64 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                     System.out.println(matchedToken.beginLine + ": Menor que: "+image);
         break;
      case 65 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                        System.out.println(matchedToken.beginLine + ": Mayor o igual que: "+image);
         break;
      case 66 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                     System.out.println(matchedToken.beginLine + ": Mayor que: "+image);
         break;
      case 67 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                   System.out.println(matchedToken.beginLine + ": Modulo: "+image);
         break;
      case 68 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                        System.out.println(matchedToken.beginLine + ". Decremento: " + image);
         break;
      case 69 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[69]);
        lengthOfMatch = jjstrLiteralImages[69].length();
                  System.out.println(matchedToken.beginLine + ": Resta: "+image);
         break;
      case 70 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[70]);
        lengthOfMatch = jjstrLiteralImages[70].length();
                     System.out.println(matchedToken.beginLine + ": Division: "+image);
         break;
      case 71 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[71]);
        lengthOfMatch = jjstrLiteralImages[71].length();
                       System.out.println(matchedToken.beginLine + ": Direfente: "+image);
         break;
      case 72 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[72]);
        lengthOfMatch = jjstrLiteralImages[72].length();
                     System.out.println(matchedToken.beginLine + ": Negacion: "+image);
         break;
      case 73 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[73]);
        lengthOfMatch = jjstrLiteralImages[73].length();
                 System.out.println(matchedToken.beginLine + ": And: "+image);
         break;
      case 74 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[74]);
        lengthOfMatch = jjstrLiteralImages[74].length();
                System.out.println(matchedToken.beginLine + ": Or: "+image);
         break;
      case 75 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[75]);
        lengthOfMatch = jjstrLiteralImages[75].length();
                System.out.println(matchedToken.beginLine + ": Multiplicaci\u00f3n: "+image);
         break;
      case 76 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[76]);
        lengthOfMatch = jjstrLiteralImages[76].length();
                         System.out.println(matchedToken.beginLine + ": Par\u00e9ntesis izquierdo: "+image);
         break;
      case 77 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[77]);
        lengthOfMatch = jjstrLiteralImages[77].length();
                         System.out.println(matchedToken.beginLine + ": Par\u00e9ntesis Derecho: "+image);
         break;
      case 78 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[78]);
        lengthOfMatch = jjstrLiteralImages[78].length();
                       System.out.println(matchedToken.beginLine + ": Corchete izquierdo: "+image);
         break;
      case 79 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[79]);
        lengthOfMatch = jjstrLiteralImages[79].length();
                       System.out.println(matchedToken.beginLine + ": Corchete derecho: "+image);
         break;
      case 80 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[80]);
        lengthOfMatch = jjstrLiteralImages[80].length();
                    System.out.println(matchedToken.beginLine + ": Llave izquierda: "+image);
         break;
      case 81 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[81]);
        lengthOfMatch = jjstrLiteralImages[81].length();
                    System.out.println(matchedToken.beginLine + ": Llave derecha:"+image);
         break;
      default : 
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
