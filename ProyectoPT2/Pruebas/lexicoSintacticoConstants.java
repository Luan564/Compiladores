/* Generated By:JavaCC: Do not edit this line. lexicoSintacticoConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface lexicoSintacticoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 5;
  /** RegularExpression Id. */
  int ELSEIF = 6;
  /** RegularExpression Id. */
  int ELSE = 7;
  /** RegularExpression Id. */
  int WHILE = 8;
  /** RegularExpression Id. */
  int FOR = 9;
  /** RegularExpression Id. */
  int BREAK = 10;
  /** RegularExpression Id. */
  int INT = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int VOID = 13;
  /** RegularExpression Id. */
  int RETURN = 14;
  /** RegularExpression Id. */
  int CONTINUE = 15;
  /** RegularExpression Id. */
  int TRUE = 16;
  /** RegularExpression Id. */
  int FALSE = 17;
  /** RegularExpression Id. */
  int STRUCT = 18;
  /** RegularExpression Id. */
  int CLASS = 19;
  /** RegularExpression Id. */
  int EXTENDS = 20;
  /** RegularExpression Id. */
  int NEW = 21;
  /** RegularExpression Id. */
  int NULL = 22;
  /** RegularExpression Id. */
  int THIS = 23;
  /** RegularExpression Id. */
  int CALLOUT = 24;
  /** RegularExpression Id. */
  int PROGRAM = 25;
  /** RegularExpression Id. */
  int STATIC = 26;
  /** RegularExpression Id. */
  int EXTERN = 27;
  /** RegularExpression Id. */
  int PUBLIC = 28;
  /** RegularExpression Id. */
  int STRING = 29;
  /** RegularExpression Id. */
  int ARG = 30;
  /** RegularExpression Id. */
  int INTEGER = 31;
  /** RegularExpression Id. */
  int CHAR = 32;
  /** RegularExpression Id. */
  int PARSEINT = 33;
  /** RegularExpression Id. */
  int DEF = 34;
  /** RegularExpression Id. */
  int OBJECT = 35;
  /** RegularExpression Id. */
  int LIST = 36;
  /** RegularExpression Id. */
  int TUPLE = 37;
  /** RegularExpression Id. */
  int CONST = 38;
  /** RegularExpression Id. */
  int IMPLEMENTS = 39;
  /** RegularExpression Id. */
  int SUPER = 40;
  /** RegularExpression Id. */
  int INTERFACE = 41;
  /** RegularExpression Id. */
  int SELF = 42;
  /** RegularExpression Id. */
  int FLOAT = 43;
  /** RegularExpression Id. */
  int BOOL = 44;
  /** RegularExpression Id. */
  int STRLIT = 46;
  /** RegularExpression Id. */
  int ID = 48;
  /** RegularExpression Id. */
  int NUMERO_ENTERO = 49;
  /** RegularExpression Id. */
  int NUMERO_HEXA = 50;
  /** RegularExpression Id. */
  int NUMERO_FLOT = 51;
  /** RegularExpression Id. */
  int ID_MAL = 54;
  /** RegularExpression Id. */
  int COMA = 55;
  /** RegularExpression Id. */
  int DOSPUNTOS = 56;
  /** RegularExpression Id. */
  int PUNTOCOMA = 57;
  /** RegularExpression Id. */
  int INCREMENTO = 58;
  /** RegularExpression Id. */
  int SUMA = 59;
  /** RegularExpression Id. */
  int IGUALDAD = 60;
  /** RegularExpression Id. */
  int IGUAL = 61;
  /** RegularExpression Id. */
  int PUNTO = 62;
  /** RegularExpression Id. */
  int MENORIGUAL = 63;
  /** RegularExpression Id. */
  int MENORQUE = 64;
  /** RegularExpression Id. */
  int MAYORIGUAL = 65;
  /** RegularExpression Id. */
  int MAYORQUE = 66;
  /** RegularExpression Id. */
  int MODULO = 67;
  /** RegularExpression Id. */
  int DECREMENTO = 68;
  /** RegularExpression Id. */
  int RESTA = 69;
  /** RegularExpression Id. */
  int DIVISION = 70;
  /** RegularExpression Id. */
  int DIFERENTE = 71;
  /** RegularExpression Id. */
  int NEGACION = 72;
  /** RegularExpression Id. */
  int AND = 73;
  /** RegularExpression Id. */
  int OR = 74;
  /** RegularExpression Id. */
  int MUL = 75;
  /** RegularExpression Id. */
  int PARENTESIS_I = 76;
  /** RegularExpression Id. */
  int PARENTESIS_D = 77;
  /** RegularExpression Id. */
  int CORCHETE_I = 78;
  /** RegularExpression Id. */
  int CORCHETE_D = 79;
  /** RegularExpression Id. */
  int LLAVE_I = 80;
  /** RegularExpression Id. */
  int LLAVE_D = 81;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int DentroCadena = 1;
  /** Lexical state. */
  int DentroComentario = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"if\"",
    "\"elseif\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"break\"",
    "\"int\"",
    "\"boolean\"",
    "\"void\"",
    "\"return\"",
    "\"continue\"",
    "\"true\"",
    "\"false\"",
    "\"struct\"",
    "\"class\"",
    "\"extends\"",
    "\"new\"",
    "\"null\"",
    "\"this\"",
    "\"callout\"",
    "\"Program\"",
    "\"static\"",
    "\"extern\"",
    "\"public\"",
    "\"string\"",
    "\"arg\"",
    "\"integer\"",
    "\"char\"",
    "\"ParseInt\"",
    "\"def\"",
    "\"Object\"",
    "\"List\"",
    "\"Tuple\"",
    "\"const\"",
    "\"implements\"",
    "\"super\"",
    "\"interface\"",
    "\"self\"",
    "\"float\"",
    "\"bool\"",
    "\"\\\"\"",
    "\"\\\"\"",
    "<token of kind 47>",
    "<ID>",
    "<NUMERO_ENTERO>",
    "<NUMERO_HEXA>",
    "<NUMERO_FLOT>",
    "<token of kind 52>",
    "<token of kind 53>",
    "<ID_MAL>",
    "\",\"",
    "\":\"",
    "\";\"",
    "\"++\"",
    "\"+\"",
    "\"==\"",
    "\"=\"",
    "\".\"",
    "\"<=\"",
    "\"<\"",
    "\">=\"",
    "\">\"",
    "\"%\"",
    "\"--\"",
    "\"-\"",
    "\"/\"",
    "\"!=\"",
    "\"!\"",
    "\"&&\"",
    "\"||\"",
    "\"*\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "<token of kind 82>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 85>",
    "<token of kind 86>",
  };

}
