/* Generated By:JavaCC: Do not edit this line. ProyectoPT2TokenManager.java */

/** Token Manager. */
public class ProyectoPT2TokenManager implements ProyectoPT2Constants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fffffc000000L) != 0L)
         {
            jjmatchedKind = 49;
            return 28;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 29;
         if ((active0 & 0x2000L) != 0L)
            return 22;
         return -1;
      case 1:
         if ((active0 & 0x100000000L) != 0L)
            return 28;
         if ((active0 & 0x1fffefc000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
            return 28;
         }
         return -1;
      case 2:
         if ((active0 & 0x1dfbabc000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
            return 28;
         }
         if ((active0 & 0x204440000000L) != 0L)
            return 28;
         return -1;
      case 3:
         if ((active0 & 0x1d8b89c000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 3;
            }
            return 28;
         }
         if ((active0 & 0x70220000000L) != 0L)
            return 28;
         return -1;
      case 4:
         if ((active0 & 0x1480888000000L) != 0L)
            return 28;
         if ((active0 & 0x92b014000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
            return 28;
         }
         return -1;
      case 5:
         if ((active0 & 0x828000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 5;
            return 28;
         }
         if ((active0 & 0x103014000000L) != 0L)
            return 28;
         return -1;
      case 6:
         if ((active0 & 0x28000000000L) != 0L)
            return 28;
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
            return 28;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 34:
         return jjStartNfaWithStates_0(0, 25, 29);
      case 37:
         return jjStopAtPos(0, 14);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 40:
         return jjStopAtPos(0, 3);
      case 41:
         return jjStopAtPos(0, 4);
      case 42:
         return jjStopAtPos(0, 12);
      case 43:
         return jjStopAtPos(0, 10);
      case 44:
         return jjStopAtPos(0, 7);
      case 45:
         return jjStopAtPos(0, 11);
      case 47:
         return jjStartNfaWithStates_0(0, 13, 22);
      case 58:
         return jjStopAtPos(0, 24);
      case 59:
         return jjStopAtPos(0, 8);
      case 60:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 61:
         jjmatchedKind = 9;
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 62:
         jjmatchedKind = 16;
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 91:
         return jjStopAtPos(0, 1);
      case 93:
         return jjStopAtPos(0, 2);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x430000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800008000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80480000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x140000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1000004000000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x2010000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 123:
         return jjStopAtPos(0, 5);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 125:
         return jjStopAtPos(0, 6);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         break;
      case 61:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000L);
      case 102:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(1, 32, 28);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x288000000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x8040000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x830420000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1444000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2010000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 124:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x18000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 102:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 28);
         break;
      case 103:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 28);
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000820000000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x30080000000L);
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000000L);
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 30, 28);
         return jjMoveStringLiteralDfa3_0(active0, 0x108000000000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400080000000L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 28);
         break;
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 28);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 42, 28);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 108:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20804000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x80008000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x801010000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 28);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x21000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800014000000L);
      case 107:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 28);
         break;
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 28);
         break;
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(4, 31, 28);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 99:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 28);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 28);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 103:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 28);
         break;
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 28);
         break;
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 28);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 28);
         break;
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 28);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 47, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x8001100000000000L, 0x0L
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 47)
                     jjAddStates(6, 7);
                  else if (curChar == 46)
                     jjCheckNAdd(4);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(1, 2);
                  if (curChar == 48)
                     jjAddStates(8, 9);
                  break;
               case 28:
                  if ((0x83ff005800000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(7);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(6);
                  }
                  break;
               case 22:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(25, 27);
                  else if (curChar == 47)
                  {
                     if (kind > 63)
                        kind = 63;
                     jjCheckNAdd(23);
                  }
                  break;
               case 29:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  else if (curChar == 34)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 53)
                     kind = 53;
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x83ff005800000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(0, 5);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(13);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar == 46 && kind > 58)
                     kind = 58;
                  break;
               case 16:
                  if (curChar == 48)
                     jjAddStates(8, 9);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               case 23:
                  if ((0xffffffffffffd9ffL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(23);
                  break;
               case 24:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(25, 27);
                  break;
               case 25:
                  jjCheckNAddTwoStates(25, 27);
                  break;
               case 26:
                  if (curChar == 47 && kind > 65)
                     kind = 65;
                  break;
               case 27:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 28:
                  if ((0x7ffffffc7fffffeL & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(7);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(6);
                  }
                  break;
               case 29:
               case 1:
                  jjCheckNAddTwoStates(1, 2);
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x7ffffffc7fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(7);
                  break;
               case 13:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 17:
                  if (curChar == 120)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x7eL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 120)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(20);
                  break;
               case 23:
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  jjAddStates(10, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
               case 7:
                  if ((jjbitVec1[i2] & l2) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjCheckNAdd(7);
                  break;
               case 29:
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 23:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 11);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   9, 10, 12, 13, 14, 15, 22, 24, 17, 19, 25, 27, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\133", "\135", "\50", "\51", "\173", "\175", "\54", "\73", "\75", "\53", 
"\55", "\52", "\57", "\45", "\74", "\76", "\74\75", "\76\75", "\75\75", "\41\75", 
"\46\46", "\174\174", "\41", "\72", "\42", "\160\165\142\154\151\143", 
"\143\154\141\163\163", "\163\164\141\164\151\143", "\166\157\151\144", "\151\156\164", 
"\146\154\157\141\164", "\151\146", "\145\154\163\145", "\146\157\162", "\167\150\151\154\145", 
"\123\171\163\164\145\155", "\163\164\162\151\156\147", "\141\162\147", "\111\156\164\145\147\145\162", 
"\142\157\157\154", "\142\157\157\154\145\141\156", "\164\162\165\145", "\146\141\154\163\145", 
"\162\145\164\165\162\156", "\144\145\146", "\142\162\145\141\153", "\143\157\156\164\151\156\165\145", 
"\160\162\151\156\164", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x3fffffffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0xffc0000000000000L, 0x3L, 
};
static final long[] jjtoSpecial = {
   0x87c0000000000000L, 0x3L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[28];
static private final int[] jjstateSet = new int[56];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public ProyectoPT2TokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public ProyectoPT2TokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 64)
   {
      jjmatchedKind = 64;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
            SkipLexicalActions(matchedToken);
         }
         else 
            SkipLexicalActions(null);
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 54 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un Numero Hexadecimal incorrecto: "+image);
         break;
      case 55 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un ID incorrecto: "+image);
         break;
      case 56 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un ID incorrecto: "+image);
         break;
      case 57 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un numero Flotante incorrecto: "+image);
         break;
      case 58 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un numero Flotante incorrecto: "+image);
         break;
      case 63 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un comentario: "+image);
         break;
      case 64 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un caracter no valido: "+image);
         break;
      case 65 :
         if (image == null)
            image = new StringBuffer();
         image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un comentario de varias lineas: "+image);
         break;
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de agrupacion: "+image);
         break;
      case 2 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de agrupacion: "+image);
         break;
      case 3 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de agrupacion: "+image);
         break;
      case 4 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de agrupacion: "+image);
         break;
      case 5 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de agrupacion: "+image);
         break;
      case 6 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de agrupacion: "+image);
         break;
      case 7 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                System.out.println(matchedToken.beginLine + ". Encontre una coma: "+image);
         break;
      case 8 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                System.out.println(matchedToken.beginLine + ". Encontre un punto y coma: "+image);
         break;
      case 9 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de asignacion: "+image);
         break;
      case 10 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de suma: "+image);
         break;
      case 11 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de resta: "+image);
         break;
      case 12 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de multiplicacion: "+image);
         break;
      case 13 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de division: "+image);
         break;
      case 14 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador resto: "+image);
         break;
      case 15 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador relacional: "+image);
         break;
      case 16 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de relacional: "+image);
         break;
      case 17 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador relacional: "+image);
         break;
      case 18 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de relacional: "+image);
         break;
      case 19 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de relacional: "+image);
         break;
      case 20 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de logico: "+image);
         break;
      case 21 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de logico: "+image);
         break;
      case 22 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                System.out.println(matchedToken.beginLine + ". Encontre operador de logico: "+image);
         break;
      case 23 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                System.out.println(matchedToken.beginLine + ". Encontre un exclamacion: "+image);
         break;
      case 24 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                System.out.println(matchedToken.beginLine + ". Encontre un dos puntos: "+image);
         break;
      case 25 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                System.out.println(matchedToken.beginLine + ". Encontre una comilla: "+image);
         break;
      case 26 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 27 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 28 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 29 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 30 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 31 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 32 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[32]);
        lengthOfMatch = jjstrLiteralImages[32].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 33 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[33]);
        lengthOfMatch = jjstrLiteralImages[33].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 34 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[34]);
        lengthOfMatch = jjstrLiteralImages[34].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 35 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[35]);
        lengthOfMatch = jjstrLiteralImages[35].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 36 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[36]);
        lengthOfMatch = jjstrLiteralImages[36].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 38 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[38]);
        lengthOfMatch = jjstrLiteralImages[38].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 39 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[39]);
        lengthOfMatch = jjstrLiteralImages[39].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 40 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[40]);
        lengthOfMatch = jjstrLiteralImages[40].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 41 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[41]);
        lengthOfMatch = jjstrLiteralImages[41].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 42 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[42]);
        lengthOfMatch = jjstrLiteralImages[42].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 43 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[43]);
        lengthOfMatch = jjstrLiteralImages[43].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 44 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[44]);
        lengthOfMatch = jjstrLiteralImages[44].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 45 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[45]);
        lengthOfMatch = jjstrLiteralImages[45].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 46 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[46]);
        lengthOfMatch = jjstrLiteralImages[46].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 47 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[47]);
        lengthOfMatch = jjstrLiteralImages[47].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 48 :
        if (image == null)
            image = new StringBuffer();
        image.append(jjstrLiteralImages[48]);
        lengthOfMatch = jjstrLiteralImages[48].length();
                System.out.println(matchedToken.beginLine + ". Encontre una palabra reservada: "+image);
         break;
      case 49 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un ID: "+image);
         break;
      case 50 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un Numero Flotante: "+image);
         break;
      case 51 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                if(Integer.parseInt(image.toString()) > 32767){
                        System.out.println(matchedToken.beginLine + ". El numero: " +image +" excede el limite de 32767!!");
                }
                else{
                        System.out.println(matchedToken.beginLine + ". Encontre un Numero entero: "+image);
                }
         break;
      case 52 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre un Numero Hexadecimal: "+image);
         break;
      case 53 :
        if (image == null)
            image = new StringBuffer();
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println(matchedToken.beginLine + ". Encontre una cadena: "+image);
         break;
      default : 
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
