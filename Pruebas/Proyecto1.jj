options { Ignore_Case = false; }

PARSER_BEGIN(Proyecto1)
	public class Proyecto1 {
			public static void main(String[] args) throws ParseException {
					Proyecto1 analizadorLex = new Proyecto1(System.in);
					analizadorLex.unaExpresion();
					System.out.println("					ANALISIS TERMINADO!!!!");
			}
	
	}


PARSER_END(Proyecto1)


<*> SKIP: {
  < " " | "\t" | "\r" | "\n" | "\r\n" >
}



//TOKEN PARA PALABRAS RESERVADAS
TOKEN:{
	<CLASS: "class"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: " +image );}   
	| 
	<PUBLIC: "public"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: " +image );} 
	| 
	<STATIC: "static"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}  
	|
	<MAIN: "Main"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: " +image);}      
	|
	<MAIN2: "main"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: " +image);}      
	|
	<VOID: "void"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );} 
	|
	<STRING: "String"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}  
	|
	<RETURN: "return"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}  
	|
	<EXTENDS: "extends"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );} 
	|
	<INT: "int"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );} 
	|
	<BOOLEAN: "boolean"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );} 
	|
	<FLOAT: "float"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}     
	|
	<IF: "if"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}  		
	|
	<ELSE: "else"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}  	
	|
	<WHILE: "while"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}	
	|
	<TRUE: "true"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}	
	|
	<FALSE: "false"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}	
	|
	<NEW: "new"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}		
	|
	<BREAK: "break"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}	
	|
	<SWITCH: "switch"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}	
	|
	<CASE: "case"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}	
	|
	<LENGTH: "length"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );} 	
	|
	<NULL: "null"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );} 
	|
	<SYSTEM: "System.out.println"> {System.out.println(matchedToken.beginLine + " ENCONTRE UNA PALABRA RESERVADA: "+image );}


}



TOKEN:{
	<IDENTIFICADOR: (["a"-"z", "A"- "Z","_"]) (["a"-"z", "A"-"Z", "_","0"-"9"])*> {System.out.println(matchedToken.beginLine + " ENCONTRE UN IDENTIFICADOR: " + image);}
}


TOKEN:{
	<IDENTIFICADORNOVALIDOCOMIENZACONNUMERO:(["0"-"9"])+ (["a"-"z", "A"-"Z"])+ (["0"-"9"])* >{System.out.println(matchedToken.beginLine + " ENCONTRE UN IDENTIFICADOR NO VALIDO, NO PUEDE COMENZAR CON UN NUMERO: " + image);}


}



TOKEN : {
    < INVALID_IDENTIFIER: (["a"-"z", "A"-"Z", "_", "0"-"9"])+ (["!", "@", "#", "$", "%", "^", "&", "*", "-", "+", "=", "/", "\\", "|", "[", "]", "{", "}", ":", "'", "\"", "<", ">",  ".", "?"])+ > {System.out.println(matchedToken.beginLine + " ENCONTRE UN IDENTIFICADOR NO VALIDO, UN IDENTIFICADOR NO PUEDE CONTENER CARACTERES ESPECIALES: " + image);}
}




TOKEN: {
	<NUMEROS: ["0"-"9"](["0"-"9"])*> {System.out.println(matchedToken.beginLine + " ENCONTRE UN NUMERO ENTERO: " + image);}
}



TOKEN:{
	<CADENA: "\"" (~["\""])* "\"" > {System.out.println(matchedToken.beginLine + " ENCONTRE UNA CADENA DE TEXTO: " + image);}

}

TOKEN: {
	<COMENTARIO: "//" (~["\n", "\r"])* > {System.out.println(matchedToken.beginLine + " ENCONTRE UN COMENTARIO: " + image);}

}

TOKEN: {
	<DECIMALMALFORMADO: (["+"-"-"])? (["0"-"9"])+ "." (["0"-"9"]){10} > {System.out.println(matchedToken.beginLine + " ENCONTRE UN NUMERO DECIMAL MAL FORMADO: " + image);}      
}

TOKEN: {
	<FLOTANTES: (["+"-"-"])? (["0"-"9"])+ ("."(["0"-"9"])+) > {System.out.println(matchedToken.beginLine + " ENCONTRE UN NUMERO DECIMAL: " + image);}      
}




//TOKEN PARA SIMBOLOS DE AGRUPAMIENTO
TOKEN:{
	<PARENTESISABRE: (["("] (["("])* ) > {System.out.println(matchedToken.beginLine + " ENCONTRE UN PARENTESIS QUE ABRE: " + image);} 
	|
	<PARENTESCIERRA: ([")"] ([")"])* ) > {System.out.println(matchedToken.beginLine + " ENCONTRE UN PARENTESIS QUE CIERRA: " + image);} 
	|
	<LLAVEABRE: (["{"] (["{"])* ) > {System.out.println(matchedToken.beginLine + " ENCONTRE UNA LLAVE QUE ABRE: " + image);} 	 
	|
	<LLAVECIERRA: (["}"] (["}"])* ) > {System.out.println(matchedToken.beginLine + " ENCONTRE UNA LLAVE QUE CIERRA: " + image);}
	|
	<CORCHETEABRE: (["["] ) > {System.out.println(matchedToken.beginLine + " ENCONTRE UN CORCHETE QUE ABRE: " + image);}		 
	|
	<CORCHETECIERRA: (["]"] ) > {System.out.println(matchedToken.beginLine + " ENCONTRE UN CORCHETE QUE CIERRA: " + image);}		 
	|
	<SIGCOMILLA: ";"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN SIMBOLO DE AGRUPACION: " + image);} 
	|
	<SIGCOMILLAS: ":"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN SIMBOLO DE AGRUPACION: " + image);} 
}



//TOKEN PARA OPERADORES

TOKEN:{
	<OPSUMA: "+"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR DE SUMA: " + image);}
	|
	<ASIGNACION: "="> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR: " + image);} 
	|
	<OPMENOR: "-"> {System.out.println(matchedToken.beginLine + " ENCONTREUN OPERADOR DE RESTA: " + image);} 
	|
	<OPDIV: "/"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR DE DIVISION: " + image);} 
	|
	<OPMODU: "%"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR DE MODULO: " + image);} 
	|
	<OPPOR: "*"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR DE MULTIPLICACION: " + image);}
	|
	<ADMIRACION: "!"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR: " + image);}
	|
	<PUNTO: "." > {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR: " + image);}
	|
	<COMA: "," > {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR: " + image);}
	|
	<OPMENORQUE: "<"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR: " + image);} 
 	|
	<OPMAYORQUE: ">"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR: " + image);} 
	|
	<OPMENOROIGUAL: "<="> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR: " + image);} 
	|
	<OPMAYOROIGUAL: "=>"> {System.out.println(matchedToken.beginLine + " ENCONTRE UN OPERADOR: " + image);} 
}

SKIP:
{   <~[]>  {System.out.println(  "ENCONTRE UN SIMBOLO NO VALIDO: " + image);}
}




void unaExpresion(): {Token t; }
{


(


<CLASS>|<PUBLIC>|<STATIC>|<MAIN>|<MAIN2>|<VOID>|<STRING>|<RETURN>|<EXTENDS>|<INT>|<BOOLEAN>|<FLOAT>|<IF>|<ELSE>|<WHILE>|<TRUE>|<FALSE>|<NEW>|<BREAK>|<SWITCH>|<CASE>|<LENGTH>|<NULL>|<SYSTEM>|<IDENTIFICADOR>|<IDENTIFICADORNOVALIDOCOMIENZACONNUMERO>|<INVALID_IDENTIFIER>|<NUMEROS>|<CADENA>|<COMENTARIO>|<DECIMALMALFORMADO>|<FLOTANTES>|<PARENTESISABRE>|<PARENTESCIERRA>|<LLAVEABRE>|<LLAVECIERRA>|<CORCHETEABRE>|<CORCHETECIERRA>|<SIGCOMILLA>|<SIGCOMILLAS>|<OPSUMA>|<ASIGNACION>|<OPMENOR>|<OPDIV>|<OPMODU>|<OPPOR>|<ADMIRACION>|<PUNTO>|<COMA>|<OPMENORQUE>|<OPMAYORQUE>|<OPMENOROIGUAL>|<OPMAYOROIGUAL>

)+<EOF>

}